// <auto-generated> This file has been auto generated. </auto-generated>
#nullable enable
namespace TestUnion
{
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("", "CA1000", Justification = "For generic unions.")]
	abstract partial class ClassUnion<T1, T2, T3> : global::System.IEquatable<global::TestUnion.ClassUnion<T1, T2, T3>>, global::Dusharp.IUnion
	{
		public global::System.Boolean IsCase1
		{
			get
			{
				return this is global::TestUnion.ClassUnion<T1, T2, T3>.Case1Case;
			}
		}

		public global::System.Boolean IsCase2
		{
			get
			{
				return this is global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case;
			}
		}

		public global::System.Boolean IsCase3
		{
			get
			{
				return this is global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case;
			}
		}

		private ClassUnion()
		{
		}

		public static partial global::TestUnion.ClassUnion<T1, T2, T3> Case1()
		{
			return global::TestUnion.ClassUnion<T1, T2, T3>.Case1Case.Instance;
		}

		public static partial global::TestUnion.ClassUnion<T1, T2, T3> Case2(int value1, T1 value2, T2 value3, T3 value4)
		{
			return new global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case(value1, value2, value3, value4);
		}

		public static partial global::TestUnion.ClassUnion<T1, T2, T3> Case3(long? value1, T1? value2, T2? value3, T3? value4, T1 value5)
		{
			return new global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case(value1, value2, value3, value4, value5);
		}

		public void Match(global::System.Action case1Case, global::System.Action<int, T1, T2, T3> case2Case, global::System.Action<long?, T1?, T2?, T3?, T1> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				case1Case(); return;
			}

			if (IsCase2)
			{
				case2Case(global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value4); return;
			}

			if (IsCase3)
			{
				case3Case(global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value4, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value5); return;
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
		}

		public TRet Match<TRet>(global::System.Func<TRet> case1Case, global::System.Func<int, T1, T2, T3, TRet> case2Case, global::System.Func<long?, T1?, T2?, T3?, T1, TRet> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				return case1Case();
			}

			if (IsCase2)
			{
				return case2Case(global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value4);
			}

			if (IsCase3)
			{
				return case3Case(global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value4, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value5);
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
			return default!;
		}

		public void Match<TState>(TState state, global::System.Action<TState> case1Case, global::System.Action<TState, int, T1, T2, T3> case2Case, global::System.Action<TState, long?, T1?, T2?, T3?, T1> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				case1Case(state); return;
			}

			if (IsCase2)
			{
				case2Case(state, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value4); return;
			}

			if (IsCase3)
			{
				case3Case(state, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value4, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value5); return;
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
		}

		public TRet Match<TState, TRet>(TState state, global::System.Func<TState, TRet> case1Case, global::System.Func<TState, int, T1, T2, T3, TRet> case2Case, global::System.Func<TState, long?, T1?, T2?, T3?, T1, TRet> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				return case1Case(state);
			}

			if (IsCase2)
			{
				return case2Case(state, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value4);
			}

			if (IsCase3)
			{
				return case3Case(state, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value1, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value2, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value3, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value4, global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value5);
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
			return default!;
		}

		public global::System.Boolean TryGetCase1Data()
		{
			if (IsCase1)
			{
				return true;
			}

			return false;
		}

		public global::System.Boolean TryGetCase2Data(out int value1, out T1 value2, out T2 value3, out T3 value4)
		{
			if (IsCase2)
			{
				value1 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value1;
				value2 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value2;
				value3 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value3;
				value4 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case>(this).value4;
				return true;
			}

			value1 = default(int)!;
			value2 = default(T1)!;
			value3 = default(T2)!;
			value4 = default(T3)!;
			return false;
		}

		public global::System.Boolean TryGetCase3Data(out long? value1, out T1? value2, out T2? value3, out T3? value4, out T1 value5)
		{
			if (IsCase3)
			{
				value1 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value1;
				value2 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value2;
				value3 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value3;
				value4 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value4;
				value5 = global::System.Runtime.CompilerServices.Unsafe.As<global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case>(this).value5;
				return true;
			}

			value1 = default(long?)!;
			value2 = default(T1?)!;
			value3 = default(T2?)!;
			value4 = default(T3?)!;
			value5 = default(T1)!;
			return false;
		}

		public virtual global::System.Boolean Equals(global::TestUnion.ClassUnion<T1, T2, T3>? other)
		{
			return global::System.Object.ReferenceEquals(this, other);
		}

		public override global::System.Boolean Equals(global::System.Object? other)
		{
			return global::System.Object.ReferenceEquals(this, other);
		}

		public override global::System.Int32 GetHashCode()
		{
			return 0;
		}

		public static global::System.Boolean operator ==(global::TestUnion.ClassUnion<T1, T2, T3>? left, global::TestUnion.ClassUnion<T1, T2, T3>? right)
		{
			return !global::System.Object.ReferenceEquals(left, null) ? left.Equals(right) : global::System.Object.ReferenceEquals(left, right);
		}

		public static global::System.Boolean operator !=(global::TestUnion.ClassUnion<T1, T2, T3>? left, global::TestUnion.ClassUnion<T1, T2, T3>? right)
		{
			return !(left == right);
		}

		private sealed class Case1Case : global::TestUnion.ClassUnion<T1, T2, T3>
		{
			public static readonly global::TestUnion.ClassUnion<T1, T2, T3>.Case1Case Instance = new global::TestUnion.ClassUnion<T1, T2, T3>.Case1Case();
			public Case1Case()
			{
			}

			public override global::System.String ToString()
			{
				return "Case1";
			}

			public override global::System.Int32 GetHashCode()
			{
				unchecked { return 1; }
			}
		}

		private sealed class Case2Case : global::TestUnion.ClassUnion<T1, T2, T3>
		{
			public readonly int value1;
			public readonly T1 value2;
			public readonly T2 value3;
			public readonly T3 value4;
			public Case2Case(int value1, T1 value2, T2 value3, T3 value4)
			{
				this.value1 = value1;
				this.value2 = value2;
				this.value3 = value3;
				this.value4 = value4;
			}

			public override global::System.String ToString()
			{
				return $"Case2 {{ value1 = {(value1)}, value2 = {(value2)}, value3 = {(value3)}, value4 = {(value4)} }}";
			}

			public override global::System.Boolean Equals(global::TestUnion.ClassUnion<T1, T2, T3>? other)
			{
				if (global::System.Object.ReferenceEquals(this, other)) return true;
				var otherCasted = other as global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case;
				if (global::System.Object.ReferenceEquals(otherCasted, null)) return false;
				return StructuralEquals(otherCasted);
			}

			public override global::System.Boolean Equals(global::System.Object? other)
			{
				if (global::System.Object.ReferenceEquals(this, other)) return true;
				var otherCasted = other as global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case;
				if (global::System.Object.ReferenceEquals(otherCasted, null)) return false;
				return StructuralEquals(otherCasted);
			}

			public override global::System.Int32 GetHashCode()
			{
				unchecked { return 2 * -1521134295 + global::System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(value1!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T1>.Default.GetHashCode(value2!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T2>.Default.GetHashCode(value3!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T3>.Default.GetHashCode(value4!); }
			}

			private global::System.Boolean StructuralEquals(global::TestUnion.ClassUnion<T1, T2, T3>.Case2Case other)
			{
				return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(value1, other.value1) && global::System.Collections.Generic.EqualityComparer<T1>.Default.Equals(value2, other.value2) && global::System.Collections.Generic.EqualityComparer<T2>.Default.Equals(value3, other.value3) && global::System.Collections.Generic.EqualityComparer<T3>.Default.Equals(value4, other.value4);
			}
		}

		private sealed class Case3Case : global::TestUnion.ClassUnion<T1, T2, T3>
		{
			public readonly long? value1;
			public readonly T1? value2;
			public readonly T2? value3;
			public readonly T3? value4;
			public readonly T1 value5;
			public Case3Case(long? value1, T1? value2, T2? value3, T3? value4, T1 value5)
			{
				this.value1 = value1;
				this.value2 = value2;
				this.value3 = value3;
				this.value4 = value4;
				this.value5 = value5;
			}

			public override global::System.String ToString()
			{
				return $"Case3 {{ value1 = {(value1)}, value2 = {(value2)}, value3 = {(value3)}, value4 = {(value4)}, value5 = {(value5)} }}";
			}

			public override global::System.Boolean Equals(global::TestUnion.ClassUnion<T1, T2, T3>? other)
			{
				if (global::System.Object.ReferenceEquals(this, other)) return true;
				var otherCasted = other as global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case;
				if (global::System.Object.ReferenceEquals(otherCasted, null)) return false;
				return StructuralEquals(otherCasted);
			}

			public override global::System.Boolean Equals(global::System.Object? other)
			{
				if (global::System.Object.ReferenceEquals(this, other)) return true;
				var otherCasted = other as global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case;
				if (global::System.Object.ReferenceEquals(otherCasted, null)) return false;
				return StructuralEquals(otherCasted);
			}

			public override global::System.Int32 GetHashCode()
			{
				unchecked { return 3 * -1521134295 + global::System.Collections.Generic.EqualityComparer<long?>.Default.GetHashCode(value1!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T1?>.Default.GetHashCode(value2!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T2?>.Default.GetHashCode(value3!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T3?>.Default.GetHashCode(value4!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T1>.Default.GetHashCode(value5!); }
			}

			private global::System.Boolean StructuralEquals(global::TestUnion.ClassUnion<T1, T2, T3>.Case3Case other)
			{
				return global::System.Collections.Generic.EqualityComparer<long?>.Default.Equals(value1, other.value1) && global::System.Collections.Generic.EqualityComparer<T1?>.Default.Equals(value2, other.value2) && global::System.Collections.Generic.EqualityComparer<T2?>.Default.Equals(value3, other.value3) && global::System.Collections.Generic.EqualityComparer<T3?>.Default.Equals(value4, other.value4) && global::System.Collections.Generic.EqualityComparer<T1>.Default.Equals(value5, other.value5);
			}
		}
	}
}
