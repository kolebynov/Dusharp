// <auto-generated> This file has been auto generated. </auto-generated>
#nullable enable
namespace TestUnion
{
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("", "CA1000", Justification = "For generic unions.")]
	[global::System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Auto)]
	partial struct StructUnion<T1, T2, T3> : global::System.IEquatable<global::TestUnion.StructUnion<T1, T2, T3>>, global::Dusharp.IUnion
	{
		private T1 Field0;
		private global::System.Object Field1;
		private T3 Field2;
		private T1? Field3;
		private global::TestUnion.StructUnionBlittableData UnionBlittableDataField;
		private global::System.Byte Index;
		public global::System.Boolean IsCase1
		{
			get
			{
				return Index == 1;
			}
		}

		public global::System.Boolean IsCase2
		{
			get
			{
				return Index == 2;
			}
		}

		public global::System.Boolean IsCase3
		{
			get
			{
				return Index == 3;
			}
		}

		public static partial global::TestUnion.StructUnion<T1, T2, T3> Case1()
		{
			var result = new global::TestUnion.StructUnion<T1, T2, T3> { Index = 1 };
			return result;
		}

		public static partial global::TestUnion.StructUnion<T1, T2, T3> Case2(int value1, T1 value2, T2 value3, T3 value4)
		{
			var result = new global::TestUnion.StructUnion<T1, T2, T3> { Index = 2 };
			result.UnionBlittableDataField.Case2Data.value1 = value1!;
			result.Field0 = value2!;
			result.Field1 = value3!;
			result.Field2 = value4!;
			return result;
		}

		public static partial global::TestUnion.StructUnion<T1, T2, T3> Case3(long? value1, T1? value2, T2? value3, T3? value4, T1 value5)
		{
			var result = new global::TestUnion.StructUnion<T1, T2, T3> { Index = 3 };
			result.UnionBlittableDataField.Case3Data.value1 = value1!;
			result.Field3 = value2!;
			result.Field1 = value3!;
			result.Field2 = value4!;
			result.Field0 = value5!;
			return result;
		}

		public void Match(global::System.Action case1Case, global::System.Action<int, T1, T2, T3> case2Case, global::System.Action<long?, T1?, T2?, T3?, T1> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				case1Case(); return;
			}

			if (IsCase2)
			{
				case2Case(this.UnionBlittableDataField.Case2Data.value1, this.Field0, global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1), this.Field2); return;
			}

			if (IsCase3)
			{
				case3Case(this.UnionBlittableDataField.Case3Data.value1, this.Field3, global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1), this.Field2, this.Field0); return;
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
		}

		public TRet Match<TRet>(global::System.Func<TRet> case1Case, global::System.Func<int, T1, T2, T3, TRet> case2Case, global::System.Func<long?, T1?, T2?, T3?, T1, TRet> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				return case1Case();
			}

			if (IsCase2)
			{
				return case2Case(this.UnionBlittableDataField.Case2Data.value1, this.Field0, global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1), this.Field2);
			}

			if (IsCase3)
			{
				return case3Case(this.UnionBlittableDataField.Case3Data.value1, this.Field3, global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1), this.Field2, this.Field0);
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
			return default!;
		}

		public void Match<TState>(TState state, global::System.Action<TState> case1Case, global::System.Action<TState, int, T1, T2, T3> case2Case, global::System.Action<TState, long?, T1?, T2?, T3?, T1> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				case1Case(state); return;
			}

			if (IsCase2)
			{
				case2Case(state, this.UnionBlittableDataField.Case2Data.value1, this.Field0, global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1), this.Field2); return;
			}

			if (IsCase3)
			{
				case3Case(state, this.UnionBlittableDataField.Case3Data.value1, this.Field3, global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1), this.Field2, this.Field0); return;
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
		}

		public TRet Match<TState, TRet>(TState state, global::System.Func<TState, TRet> case1Case, global::System.Func<TState, int, T1, T2, T3, TRet> case2Case, global::System.Func<TState, long?, T1?, T2?, T3?, T1, TRet> case3Case)
		{
			Dusharp.ExceptionUtils.ThrowIfNull(case1Case, "case1Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case2Case, "case2Case");
			Dusharp.ExceptionUtils.ThrowIfNull(case3Case, "case3Case");

			if (IsCase1)
			{
				return case1Case(state);
			}

			if (IsCase2)
			{
				return case2Case(state, this.UnionBlittableDataField.Case2Data.value1, this.Field0, global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1), this.Field2);
			}

			if (IsCase3)
			{
				return case3Case(state, this.UnionBlittableDataField.Case3Data.value1, this.Field3, global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1), this.Field2, this.Field0);
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
			return default!;
		}

		public global::System.Boolean TryGetCase1Data()
		{
			if (IsCase1)
			{
				return true;
			}

			return false;
		}

		public global::System.Boolean TryGetCase2Data(out int value1, out T1 value2, out T2 value3, out T3 value4)
		{
			if (IsCase2)
			{
				value1 = this.UnionBlittableDataField.Case2Data.value1;
				value2 = this.Field0;
				value3 = global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1);
				value4 = this.Field2;
				return true;
			}

			value1 = default(int)!;
			value2 = default(T1)!;
			value3 = default(T2)!;
			value4 = default(T3)!;
			return false;
		}

		public global::System.Boolean TryGetCase3Data(out long? value1, out T1? value2, out T2? value3, out T3? value4, out T1 value5)
		{
			if (IsCase3)
			{
				value1 = this.UnionBlittableDataField.Case3Data.value1;
				value2 = this.Field3;
				value3 = global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1);
				value4 = this.Field2;
				value5 = this.Field0;
				return true;
			}

			value1 = default(long?)!;
			value2 = default(T1?)!;
			value3 = default(T2?)!;
			value4 = default(T3?)!;
			value5 = default(T1)!;
			return false;
		}

		public global::System.Boolean Equals(global::TestUnion.StructUnion<T1, T2, T3> other)
		{
			if (this.Index != other.Index) return false;
			switch (Index)
			{
				case 1:
					return true;
				case 2:
					return global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(this.UnionBlittableDataField.Case2Data.value1, other.UnionBlittableDataField.Case2Data.value1) && global::System.Collections.Generic.EqualityComparer<T1>.Default.Equals(this.Field0, other.Field0) && global::System.Collections.Generic.EqualityComparer<T2>.Default.Equals(global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1), global::System.Runtime.CompilerServices.Unsafe.As<T2>(other.Field1)) && global::System.Collections.Generic.EqualityComparer<T3>.Default.Equals(this.Field2, other.Field2);
				case 3:
					return global::System.Collections.Generic.EqualityComparer<long?>.Default.Equals(this.UnionBlittableDataField.Case3Data.value1, other.UnionBlittableDataField.Case3Data.value1) && global::System.Collections.Generic.EqualityComparer<T1?>.Default.Equals(this.Field3, other.Field3) && global::System.Collections.Generic.EqualityComparer<T2?>.Default.Equals(global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1), global::System.Runtime.CompilerServices.Unsafe.As<T2?>(other.Field1)) && global::System.Collections.Generic.EqualityComparer<T3?>.Default.Equals(this.Field2, other.Field2) && global::System.Collections.Generic.EqualityComparer<T1>.Default.Equals(this.Field0, other.Field0);
			}

			return true;
		}

		public override global::System.Boolean Equals(global::System.Object? other)
		{
			return other is global::TestUnion.StructUnion<T1, T2, T3> && Equals((global::TestUnion.StructUnion<T1, T2, T3>)other);
		}

		public override global::System.Int32 GetHashCode()
		{
			switch (Index)
			{
				case 1:
					unchecked { return 1; }
				case 2:
					unchecked { return 2 * -1521134295 + global::System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(this.UnionBlittableDataField.Case2Data.value1!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T1>.Default.GetHashCode(this.Field0!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T2>.Default.GetHashCode(global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1)!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T3>.Default.GetHashCode(this.Field2!); }
				case 3:
					unchecked { return 3 * -1521134295 + global::System.Collections.Generic.EqualityComparer<long?>.Default.GetHashCode(this.UnionBlittableDataField.Case3Data.value1!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T1?>.Default.GetHashCode(this.Field3!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T2?>.Default.GetHashCode(global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1)!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T3?>.Default.GetHashCode(this.Field2!) * -1521134295 + global::System.Collections.Generic.EqualityComparer<T1>.Default.GetHashCode(this.Field0!); }
			}

			return 0;
		}

		public override global::System.String ToString()
		{
			switch (Index)
			{
				case 1:
					return "Case1";
				case 2:
					return $"Case2 {{ value1 = {(this.UnionBlittableDataField.Case2Data.value1)}, value2 = {(this.Field0)}, value3 = {(global::System.Runtime.CompilerServices.Unsafe.As<T2>(this.Field1))}, value4 = {(this.Field2)} }}";
				case 3:
					return $"Case3 {{ value1 = {(this.UnionBlittableDataField.Case3Data.value1)}, value2 = {(this.Field3)}, value3 = {(global::System.Runtime.CompilerServices.Unsafe.As<T2?>(this.Field1))}, value4 = {(this.Field2)}, value5 = {(this.Field0)} }}";
			}

			Dusharp.ExceptionUtils.ThrowUnionInInvalidState();
			return null!;
		}

		public static global::System.Boolean operator ==(global::TestUnion.StructUnion<T1, T2, T3> left, global::TestUnion.StructUnion<T1, T2, T3> right)
		{
			return left.Equals(right);
		}

		public static global::System.Boolean operator !=(global::TestUnion.StructUnion<T1, T2, T3> left, global::TestUnion.StructUnion<T1, T2, T3> right)
		{
			return !(left == right);
		}
	}

	[global::System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit)]
	internal struct StructUnionBlittableData
	{
		[global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
		public global::TestUnion.StructUnionBlittableData.Case2BlittableData Case2Data;
		[global::System.Runtime.InteropServices.FieldOffsetAttribute(0)]
		public global::TestUnion.StructUnionBlittableData.Case3BlittableData Case3Data;
		[global::System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Auto)]
		public struct Case2BlittableData
		{
			public int value1;
		}

		[global::System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Auto)]
		public struct Case3BlittableData
		{
			public long? value1;
		}
	}
}
