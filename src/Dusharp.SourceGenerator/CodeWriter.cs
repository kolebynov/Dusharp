using System;
using System.Collections.Generic;
using System.Text;

namespace Dusharp;

public sealed class CodeWriter : IDisposable
{
	private readonly bool _writeSemicolonOnClose;
	private List<(int Depth, string Line)> _lines = [];
	private int _depth;

	public CodeWriter AppendLine() => AppendLineWithoutTab(string.Empty);

	public CodeWriter()
	{
	}

	public CodeWriter AppendLine(string line) => AppendLine(_depth, line);

	public CodeWriter AppendLineWithoutTab(string line) => AppendLine(int.MinValue, line);

	public void Append(CodeWriter codeWriter)
	{
		foreach (var (depth, line) in codeWriter._lines)
		{
			_lines.Add((_depth + depth, line));
		}
	}

	public CodeWriter NewBlock(bool writeSemicolonOnClose = false)
	{
		AppendLine("{");
		return new CodeWriter(_lines, _depth + 1, writeSemicolonOnClose);
	}

	public void Dispose()
	{
		if (_depth > 0)
		{
			_depth--;
			AppendLine(_writeSemicolonOnClose ? "};" : "}");
		}

		_depth = -1;
	}

	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.AppendLine("// <auto-generated> This file has been auto generated. </auto-generated>");
		foreach (var (depth, line) in _lines)
		{
			if (depth > 0)
			{
				sb.Append('\t', depth);
			}

			sb.AppendLine(line);
		}

		return sb.ToString();
	}

	private CodeWriter(List<(int Depth, string Line)> lines, int depth, bool writeSemicolonOnClose)
	{
		_lines = lines ?? throw new ArgumentNullException(nameof(lines));
		_depth = depth;
		_writeSemicolonOnClose = writeSemicolonOnClose;
	}

	private CodeWriter AppendLine(int depth, string line)
	{
		if (line != "}" && _lines.Count != 0 && _lines[^1].Line == "}")
		{
			_lines.Add((int.MinValue, string.Empty));
		}

		_lines.Add((depth, line));
		return this;
	}
}
