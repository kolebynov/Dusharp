using System;
using System.Collections.Generic;
using System.Text;
using Dusharp.Extensions;

namespace Dusharp;

public sealed class CodeWriter : IDisposable
{
#pragma warning disable RS1035
	private static readonly string NewLine = Environment.NewLine;
#pragma warning restore RS1035

	private readonly bool _writeSemicolonOnClose;
	private readonly StringBuilder _stringBuilder;
	private readonly int _depth;
	private readonly string _depthStr;

	public CodeWriter AppendLine() => AppendLineWithoutTab(string.Empty);

	public CodeWriter()
		: this(new StringBuilder().AppendLine("// <auto-generated> This file has been auto generated. </auto-generated>"), 0, false)
	{
	}

	public CodeWriter AppendLine(string line) => Append(_depthStr, line, true);

	public CodeWriter Append(string line) => Append(_depthStr, line, false);

	public CodeWriter AppendLineWithoutTab(string line) => Append(string.Empty, line, true);

	public CodeWriter NewBlock(bool writeSemicolonOnClose = false)
	{
		AppendLine("{");
		return new CodeWriter(_stringBuilder, _depth + 1, writeSemicolonOnClose);
	}

	public void Dispose()
	{
		if (_depth > 0)
		{
			Append(new string('\t', _depth - 1), _writeSemicolonOnClose ? "};" : "}", true);
		}
	}

	public override string ToString() => _stringBuilder.ToString();

	private CodeWriter(StringBuilder stringBuilder, int depth, bool writeSemicolonOnClose)
	{
		_stringBuilder = stringBuilder;
		_depth = depth;
		_depthStr = new string('\t', depth);
		_writeSemicolonOnClose = writeSemicolonOnClose;
	}

	private CodeWriter Append(string depthStr, string line, bool newLine)
	{
		if (line != "}" && _stringBuilder[^(NewLine.Length + 1)] == '}')
		{
			_stringBuilder.AppendLine();
		}

		if (_stringBuilder.EndsWith(NewLine) && depthStr.Length > 0)
		{
			_stringBuilder.Append(depthStr);
		}

		_stringBuilder.Append(line);
		if (newLine)
		{
			_stringBuilder.AppendLine();
		}

		return this;
	}
}
